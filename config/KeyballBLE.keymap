#define ZMK_POINTING_DEFAULT_SCRL_VAL 120    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&mt_exit_AML_on_hold BACKSPACE BACKSPACE>;
            key-positions = <8 9>;
            layers = <0 4>;
        };

        minus {
            bindings = <&kp_exit_AML MINUS>;
            key-positions = <7 8>;
            layers = <0>;
        };

        left_bracket {
            bindings = <&kp_exit_AML LEFT_BRACKET>;
            key-positions = <21 33>;
            layers = <0>;
        };

        right_bracket {
            bindings = <&kp_exit_AML RIGHT_BRACKET>;
            key-positions = <33 42>;
            layers = <0>;
        };

        at_sign {
            bindings = <&kp_exit_AML AT_SIGN>;
            key-positions = <20 21>;
            layers = <0>;
        };

        semi_colon {
            bindings = <&kp_exit_AML SEMICOLON>;
            key-positions = <30 31>;
            layers = <0>;
        };

        colon {
            bindings = <&kp_exit_AML COLON>;
            key-positions = <31 32>;
            layers = <0>;
        };

        backslash {
            bindings = <&kp_exit_AML BACKSLASH>;
            key-positions = <8 9>;
            layers = <1>;
        };

        underscore {
            bindings = <&kp_exit_AML LS(MINUS)>;
            key-positions = <32 33>;
            layers = <0>;
        };

        end {
            bindings = <&kp_exit_AML END>;
            key-positions = <38 39>;
            layers = <0>;
        };

        home {
            bindings = <&kp_exit_AML HOME>;
            key-positions = <37 38>;
            layers = <0>;
        };

        auto_calculation {
            bindings = <&kp LA(LC(M))>;
            key-positions = <24 8>;
            layers = <2>;
        };

        auto_calculation_off {
            bindings = <&kp LA(M)>;
            key-positions = <24 13>;
            layers = <2>;
        };

        win_hold {
            bindings = <&window_hold>;
            key-positions = <1 17>;
            layers = <2>;
        };

        group_on {
            bindings = <&kp LS(LA(RIGHT_ARROW))>;
            key-positions = <14 8>;
            layers = <2>;
        };

        group_off {
            bindings = <&kp LA(LS(LEFT_ARROW))>;
            key-positions = <14 13>;
            layers = <2>;
        };

        auto_fil {
            bindings = <&kp LS(LC(L))>;
            key-positions = <10 13>;
            layers = <2>;
        };

        remove_duplicates {
            bindings = <&remove_duplicates>;
            key-positions = <3 12>;
            layers = <2>;
        };

        merging_cells {
            bindings = <&merging_cells>;
            key-positions = <24 19>;
            layers = <2>;
        };

        vlookup {
            bindings = <&vlookup>;
            key-positions = <25 20>;
            layers = <2>;
        };

        round {
            bindings = <&round>;
            key-positions = <3 8>;
            layers = <2>;
        };

        cell_setting {
            bindings = <&kp LC(NUMBER_1)>;
            key-positions = <22 34>;
            layers = <2>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off MOUSE>;
            label = "exit_AML";
        };

        kp_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &exit_AML>;
            label = "KP_exit_AML";
        };

        mod_exit_AML: mod_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&exit_AML>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "MOD_exit_AML";
        };

        mo_exit_AML: mo_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&exit_AML>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>;

            label = "MO_exit_AML";
        };

        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&sl_250 MOUSE>;

            label = "MKP_EXIT_AML";
        };

        remove_duplicates: choufuku {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp A &kp M>;
            label = "CHOUFUKU";
        };

        window_hold: window_hold {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp W &kp F &kp F>;
            label = "WINDOW_HOLD";
        };

        merging_cells: merging_cells {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp M &kp C>;
            label = "MERGING_CELLS";
        };

        left_alignment: left_alignment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp A &kp L>;
            label = "LEFT_ALIGNMENT";
        };

        center_alignment: center_alignment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp A &kp C>;
            label = "CENTER_ALIGNMENT";
        };

        right_alignment: right_alignment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp A &kp R>;
            label = "RIGHT_ALIGNMENT";
        };

        top_alignment: top_alignment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp A &kp T>;
            label = "TOP_ALIGNMENT";
        };

        vertical_center_alignment: vertical_center_alignment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp A &kp M>;
            label = "VERTICAL_CENTER_ALIGNMENT";
        };

        bottom_alignment: bottom_alignment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp A &kp B>;
            label = "BOTTOM_ALIGNMENT";
        };

        sum: sum {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp M &kp U &kp S>;
            label = "SUM";
        };

        sumproduct: sumproduct {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp S &kp U &kp M &kp P &kp R &kp O &kp D &kp U &kp C &kp T &kp LEFT_PARENTHESIS>;
            label = "SUMPRODUCT";
        };

        vlookup: vlookup {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp I &kp F &kp N &kp A &kp LEFT_PARENTHESIS &kp V &kp L &kp O &kp O &kp K &kp U &kp P &kp LEFT_PARENTHESIS>;
            label = "VLOOKUP";
        };

        round: round {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp R &kp O &kp U &kp N &kp D &kp LEFT_PARENTHESIS &kp LEFT_PARENTHESIS>;
            label = "ROUND";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ROTATE: ROTATE {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ROTATE";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;

            tap-ms = <20>;
        };

        sl_250: sl_250 {
            compatible = "zmk,behavior-sticky-key";
            label = "SL_250";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <250>;
        };

        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        lt_exit_AML: lt_exit_AML {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_exit_AML";
            bindings = <&mo_exit_AML>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        lt_exit_AML_on_hold: lt_exit_AML_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_exit_AML_ON_HOLD";
            bindings = <&mo_exit_AML>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        lt_exit_AML_on_tap: lt_exit_AML_on_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_exit_AML_ON_tap";
            bindings = <&mo>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        mt_exit_AML: mt_exit_AML {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML";
            bindings = <&mod_exit_AML>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };

        mt_exit_AML_on_hold: mt_exit_AML_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML_ON_HOLD";
            bindings = <&mod_exit_AML>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };

        mt_exit_AML_on_tap: mt_exit_AML_on_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML_ON_TAP";
            bindings = <&kp>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt_exit_AML_on_tap Q TAB               &kp_exit_AML W                  &kp_exit_AML E                  &kp_exit_AML R             &kp_exit_AML T                                                                   &kp_exit_AML Y                &kp_exit_AML U  &kp_exit_AML I      &kp_exit_AML O    &kp_exit_AML P
&lt_exit_AML 1 A                        &kp_exit_AML S                  &kp_exit_AML D                  &kp_exit_AML F             &kp_exit_AML G           &kp_exit_AML LC(LEFT_GUI)      &kp_exit_AML F7          &kp_exit_AML H                &kp_exit_AML J  &lt_exit_AML 5 K    &kp_exit_AML L    &lt_exit_AML 1 ENTER
&mt_exit_AML_on_tap LEFT_SHIFT Z        &kp_exit_AML X                  &kp_exit_AML C                  &kp_exit_AML V             &kp_exit_AML B           &kp_exit_AML UP_ARROW          &kp_exit_AML LANGUAGE_5  &kp_exit_AML N                &kp_exit_AML M  &kp_exit_AML COMMA  &kp_exit_AML DOT  &mt_exit_AML_on_tap RIGHT_SHIFT SLASH
&mt_exit_AML_on_tap LCTRL LEFT_CONTROL  &mt_exit_AML LEFT_WIN LEFT_GUI  &mt_exit_AML LEFT_ALT LEFT_ALT  &lt_exit_AML 6 LEFT_ARROW  &kp_exit_AML DOWN_ARROW  &kp_exit_AML RIGHT_ARROW       &kp_exit_AML BACKSPACE   &lt_exit_AML_on_hold 2 SPACE                                                        &kp_exit_AML DELETE
            >;

            sensor-bindings = <&ROTATE SCRL_DOWN SCRL_UP>;
        };

        SYMBOL {
            bindings = <
&kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH  &kp DOLLAR  &kp PERCENT                      &kp AMPERSAND  &kp GRAVE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL
&trans           &trans             &trans    &trans      &trans       &trans      &trans  &trans         &trans     &trans                &trans                 &trans
&trans           &trans             &trans    &trans      &trans       &trans      &trans  &trans         &trans     &trans                &trans                 &trans
&trans           &trans             &trans    &trans      &trans       &trans      &trans  &trans                                                                 &trans
            >;
        };

        NUM_SHORTCUT {
            bindings = <
&kp KP_NUMBER_7               &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_ASTERISK  &kp KP_DIVIDE                                                            &trans  &kp F10  &kp F7  &kp F8  &kp F9
&kp KP_NUMBER_4               &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS      &kp KP_MINUS                        &kp LC(LA(KP_NUMBER_0))      &trans  &trans  &kp F11  &kp F4  &kp F5  &kp F6
&mt LEFT_SHIFT KP_NUMBER_1    &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT       &sum                                &trans                       &trans  &trans  &kp F12  &kp F1  &kp F2  &kp F3
&mt LEFT_CONTROL KP_NUMBER_0  &trans           &trans           &kp LC(PAGE_UP)  &mt_exit_AML LEFT_SHIFT LEFT_SHIFT  &kp LC(PAGE_DOWN)            &trans  &trans                           &trans
            >;
        };

        PASS {
            bindings = <
&trans  &trans  &trans  &trans    &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans    &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &vlookup  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans    &trans  &trans      &trans  &trans                          &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                        &trans  &trans  &trans                                &mkp_exit_AML LCLK            &mkp_exit_AML RCLK
&trans  &trans  &trans  &trans  &trans  &trans      &trans                                    &trans  &trans  &lt_exit_AML_on_tap 5 LA(LEFT_ARROW)  &kp_exit_AML LA(RIGHT_ARROW)  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &mt_exit_AML_on_tap LEFT_SHIFT LC(SPACE)  &trans  &trans  &kp_exit_AML LS(LC(TAB))              &kp_exit_AML LC(TAB)          &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans                                    &trans                                                                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &studio_unlock  &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader     &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans          &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
