#define ZMK_POINTING_DEFAULT_SCRL_VAL 120    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&mt_exit_AML_on_hold DELETE BACKSPACE>;
            key-positions = <8 9>;
            layers = <0 2 1>;
        };

        f12_backslash {
            bindings = <&mt BACKSLASH F12>;
            key-positions = <7 8>;
            layers = <0>;
        };

        f9_tilde {
            bindings = <&mt TILDE F9>;
            key-positions = <6 7>;
            layers = <0>;
        };

        fanction_7 {
            bindings = <&kp F7>;
            key-positions = <5 6>;
            layers = <0>;
        };

        language {
            bindings = <&mt ESCAPE LS(CAPSLOCK)>;
            key-positions = <0 1>;
            layers = <0>;
        };

        center_alignment {
            bindings = <&center_alignment>;
            key-positions = <40 41>;
            layers = <0>;
        };

        vertical_alignment {
            bindings = <&vertical_center_alignment>;
            key-positions = <16 28>;
            layers = <0>;
        };

        num_numlock {
            bindings = <&kp KP_NUMLOCK>;
            key-positions = <0 1>;
            layers = <2>;
        };

        num_slash {
            bindings = <&kp SLASH>;
            key-positions = <2 1>;
            layers = <2>;
        };

        num_asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <2 3>;
            layers = <2>;
        };

        f4 {
            bindings = <&kp F4>;
            key-positions = <3 4>;
            layers = <0>;
        };

        f2 {
            bindings = <&kp F2>;
            key-positions = <1 2>;
            layers = <0>;
        };

        vlookup {
            bindings = <&vlookup>;
            key-positions = <25 20>;
            layers = <0>;
        };

        round {
            bindings = <&round>;
            key-positions = <3 8>;
            layers = <0>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <19 20>;
            layers = <0>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <20 21>;
            layers = <0>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off MOUSE>;
            label = "exit_AML";
        };

        kp_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &exit_AML>;
            label = "KP_exit_AML";
        };

        mod_exit_AML: mod_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&exit_AML>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "MOD_exit_AML";
        };

        mo_exit_AML: mo_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&exit_AML>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>;

            label = "MO_exit_AML";
        };

        shift_click: shift_crick {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&mkp LCLK>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFT_CRICK";
        };

        control_click: contolor_click {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL &mkp LCLK>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_CONTROL &mkp LCLK>;

            label = "CONTOLOR_CLICK";
        };

        remove_duplicates: choufuku {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp A &kp M>;
            label = "CHOUFUKU";
        };

        window_hold: window_hold {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp W &kp F &kp F>;
            label = "WINDOW_HOLD";
        };

        merging_cells: merging_cells {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp M &kp C>;
            label = "MERGING_CELLS";
        };

        left_alignment: left_alignment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp A &kp L>;
            label = "LEFT_ALIGNMENT";
        };

        center_alignment: center_alignment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp A &kp C>;
            label = "CENTER_ALIGNMENT";
        };

        right_alignment: right_alignment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp A &kp R>;
            label = "RIGHT_ALIGNMENT";
        };

        top_alignment: top_alignment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp A &kp T>;
            label = "TOP_ALIGNMENT";
        };

        vertical_center_alignment: vertical_center_alignment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp A &kp M>;
            label = "VERTICAL_CENTER_ALIGNMENT";
        };

        bottom_alignment: bottom_alignment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp H &kp A &kp B>;
            label = "BOTTOM_ALIGNMENT";
        };

        sum: sum {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp M &kp U &kp S>;
            label = "SUM";
        };

        sumproduct: sumproduct {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp S &kp U &kp M &kp P &kp R &kp O &kp D &kp U &kp C &kp T &kp LEFT_PARENTHESIS>;
            label = "SUMPRODUCT";
        };

        vlookup: vlookup {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp I &kp F &kp N &kp A &kp LEFT_PARENTHESIS &kp V &kp L &kp O &kp O &kp K &kp U &kp P &kp LEFT_PARENTHESIS>;
            label = "VLOOKUP";
        };

        round: round {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp R &kp O &kp U &kp N &kp D &kp LEFT_PARENTHESIS &kp LEFT_PARENTHESIS>;
            label = "ROUND";
        };

        paste_formulas_only: paste_formulas_only {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp S &kp F &kp ENTER>;
            label = "PASTE_FORMULAS_ONLY";
        };

        transpose_and_paste: transpose_and_paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp S &kp E &kp V &kp ENTER>;
            label = "TRANSPOSE_AND_PASTE";
        };

        paste_memo_only: paste_memo_only {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp S &kp C &kp ENTER>;
            label = "PASTE_MEMO_ONLY";
        };

        auto_calculation: auto_calculation {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp M &kp X &kp A>;
            label = "AUTO_CALCULATION";
        };

        auto_calculation_off: auto_calculation_off {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT &kp M &kp X &kp M>;
            label = "AUTO_CALCULATION_OFF";
        };

        double_zero: double_zero {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp KP_NUMBER_0 &kp KP_NUMBER_0>;
            label = "DOUBLE_ZERO";
        };

        control_shift_click: control_shift_click {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_SHIFT>,
                <&macro_tap>,
                <&mkp LCLK>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_SHIFT>;

            label = "CONTROL_SHIFT_CLICK";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ROTATE: ROTATE {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ROTATE";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;

            tap-ms = <20>;
        };

        sl_250: sl_250 {
            compatible = "zmk,behavior-sticky-key";
            label = "SL_250";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <250>;
        };

        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        lt_exit_AML_on_hold: lt_exit_AML_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_exit_AML_ON_HOLD";
            bindings = <&mo_exit_AML>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        mt_exit_AML_on_hold: mt_exit_AML_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML_ON_HOLD";
            bindings = <&mod_exit_AML>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };

        ht_kp_duplicates: ht_kp_duplicates {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_DUPLICATES";
            bindings = <&remove_duplicates>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        ht_kp_left_align: ht_kp_left_align {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_LEFT_ALIGN";
            bindings = <&left_alignment>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        ht_kp_right_align: ht_kp_right_align {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_RIGHT_ALIGN";
            bindings = <&right_alignment>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        ht_kp_top_align: ht_kp_top_align {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_TOP_ALIGN";
            bindings = <&top_alignment>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        ht_kp_bottom_align: ht_kp_bottom_align {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP_BOTTOM_ALIGN";
            bindings = <&bottom_alignment>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        ht_calculation_on_off: ht_calculation_on_off {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_CALCULATION_ON_OFF";
            bindings = <&auto_calculation>, <&auto_calculation_off>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        ht_shiftclick_contsiftclick: ht_shiftclick_contsiftclick {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_SHIFTCLICK_CONTSIFTCLICK";
            bindings = <&control_shift_click>, <&shift_click>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        tap_paste: tap_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_PASTE";
            #binding-cells = <0>;
            bindings =
                <&paste_formulas_only>,
                <&transpose_and_paste>,
                <&paste_memo_only>;

            tapping-term-ms = <250>;
        };

        tap_equal: tap_equal {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_EQUAL";
            #binding-cells = <0>;
            bindings = <&kp KP_EQUAL>, <&sum>, <&sumproduct>;

            tapping-term-ms = <250>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt Q TAB                      &kp W                  &kp E                 &kp R                                          &mt LC(T) T                                                                                     &mt LC(Y) Y              &kp U  &kp I                &lt 5 O                &mt LEFT_BRACKET P
&mt LC(A) A                    &mt LC(S) S            &mt LG(D) D           &mt LC(F) F                                    &mt LC(G) G                   &kp LG(LS(S))                      &mt LA(RIGHT_ARROW) UP_ARROW   &mt LC(H) H              &kp J  &kp K                &mt AT_SIGN L          &mt RIGHT_BRACKET MINUS
&mt LEFT_SHIFT Z               &mt LC(X) X            &mt LC(C) C           &mt LC(V) V                                    &mt LC(B) B                   &lt 6 LS(CAPSLOCK)                 &mt LA(LEFT_ARROW) DOWN_ARROW  &kp N                    &kp M  &mt LS(COMMA) COMMA  &mt LS(PERIOD) PERIOD  &mt RIGHT_SHIFT SLASH
&mt LEFT_CONTROL LEFT_CONTROL  &mt LEFT_WIN LEFT_WIN  &mt LEFT_ALT LG(TAB)  &mt_exit_AML_on_hold LC(LEFT_SHIFT) BACKSPACE  &lt_exit_AML_on_hold 2 SPACE  &lt_exit_AML_on_hold 1 DELETE      &mt LS(HOME) LEFT_ARROW        &mt LS(END) RIGHT_ARROW                                                     &lt 2 ENTER
            >;

            sensor-bindings = <&ROTATE SCRL_DOWN SCRL_UP>;
        };

        APP_CTRL {
            bindings = <
&trans  &kp LG(NUMBER_7)  &kp LG(NUMBER_8)  &kp LG(NUMBER_9)  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(NUMBER_4)  &kp LG(NUMBER_5)  &kp LG(NUMBER_6)  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &trans            &trans            &trans  &trans      &trans  &trans                          &trans
            >;
        };

        MOUSE_NUM_SYMBOL {
            bindings = <
&tap_equal     &mt GRAVE KP_NUMBER_7            &mt LEFT_PARENTHESIS KP_NUMBER_8  &mt RIGHT_PARENTHESIS KP_NUMBER_9  &mt LC(KP_MINUS) KP_MINUS                                                                   &kp LG(E)                            &control_click              &mkp LCLK                           &trans                                &mkp RCLK
&kp LC(LS(L))  &mt DOLLAR KP_NUMBER_4           &mt PERCENT KP_NUMBER_5           &mt AMPERSAND KP_NUMBER_6          &mt LC(KP_PLUS) KP_PLUS    &trans                          &mt LA(LS(RIGHT)) LC(LS(TAB))    &window_hold                         &ht_calculation_on_off 0 0  &ht_shiftclick_contsiftclick 0 0    &ht_kp_top_align 0 LG(UP_ARROW)       &mt LA(F4) LC(W)
&kp LS(SPACE)  &mt EXCLAMATION KP_NUMBER_1      &mt DOUBLE_QUOTES KP_NUMBER_2     &mt POUND KP_NUMBER_3              &mt KP_COMMA KP_DOT        &tap_paste                      &mt LA(LS(LEFT)) LC(TAB)         &trans                               &merging_cells              &ht_kp_left_align 0 LG(LEFT_ARROW)  &ht_kp_bottom_align 0 LG(DOWN_ARROW)  &ht_kp_right_align 0 LG(RIGHT_ARROW)
&kp LC(SPACE)  &mt LC(KP_NUMBER_0) KP_NUMBER_0  &double_zero                      &trans                             &trans                     &ht_kp_duplicates 0 DELETE      &mt LC(LS(PAGE_UP)) LC(PAGE_UP)  &mt LC(LS(PAGE_DOWN)) LC(PAGE_DOWN)                                                                                                        &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &mkp LCLK  &trans  &mkp RCLK
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                             &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans           &trans           &trans           &trans                              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans           &trans           &trans           &trans  &trans      &studio_unlock  &trans        &trans        &trans        &trans        &trans
&trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans  &trans      &bootloader     &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans           &trans           &trans           &trans  &trans      &trans          &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
